// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace opra.itelligent.es.Models
{
    public partial class BdOpraContext : DbContext
    {
        public BdOpraContext()
        {
        }

        public BdOpraContext(DbContextOptions<BdOpraContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TblEjecucion> TblEjecucion { get; set; }
        public virtual DbSet<TblMaestraProblema> TblMaestraProblema { get; set; }
        public virtual DbSet<TblMaestraProblemaTsp> TblMaestraProblemaTsp { get; set; }
        public virtual DbSet<TblModeloTsp> TblModeloTsp { get; set; }
        public virtual DbSet<TblSolucion> TblSolucion { get; set; }
        public virtual DbSet<TblSolucionTsp> TblSolucionTsp { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<TblEjecucion>(entity =>
            {
                entity.HasKey(e => e.IntId);

                entity.ToTable("tblEjecucion");

                entity.Property(e => e.IntId).HasColumnName("intId");

                entity.Property(e => e.DtmAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("dtmAlta")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IntIdProblema).HasColumnName("intIdProblema");

                entity.Property(e => e.StrNombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("strNombre");

                entity.HasOne(d => d.IntIdProblemaNavigation)
                    .WithMany(p => p.TblEjecucion)
                    .HasForeignKey(d => d.IntIdProblema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEjecucion_tblMaestraProblema");
            });

            modelBuilder.Entity<TblMaestraProblema>(entity =>
            {
                entity.HasKey(e => e.IntId);

                entity.ToTable("tblMaestraProblema");

                entity.Property(e => e.IntId).HasColumnName("intId");

                entity.Property(e => e.DblMejorSolucion).HasColumnName("dblMejorSolucion");

                entity.Property(e => e.DtmAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("dtmAlta")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IntNumeroMaquinas).HasColumnName("intNumeroMaquinas");

                entity.Property(e => e.IntNumeroTrabajos).HasColumnName("intNumeroTrabajos");

                entity.Property(e => e.StrBucketS3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("strBucketS3");

                entity.Property(e => e.StrDescripcion)
                    .HasMaxLength(250)
                    .HasColumnName("strDescripcion");

                entity.Property(e => e.StrFuente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("strFuente");

                entity.Property(e => e.StrKeyS3)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("strKeyS3");

                entity.Property(e => e.StrNombreProblema)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("strNombreProblema");
            });

            modelBuilder.Entity<TblMaestraProblemaTsp>(entity =>
            {
                entity.HasKey(e => e.IntId);

                entity.ToTable("tblMaestraProblemaTSP");

                entity.Property(e => e.IntId).HasColumnName("intId");

                entity.Property(e => e.DblMejorSolucion).HasColumnName("dblMejorSolucion");

                entity.Property(e => e.DtmAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("dtmAlta")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StrBucketS3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("strBucketS3");

                entity.Property(e => e.StrDescripcion)
                    .HasMaxLength(250)
                    .HasColumnName("strDescripcion");

                entity.Property(e => e.StrKeyS3)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("strKeyS3");

                entity.Property(e => e.StrNombreProblema)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("strNombreProblema");

                entity.Property(e => e.StrSolucionOptima).HasColumnName("strSolucionOptima");
            });

            modelBuilder.Entity<TblModeloTsp>(entity =>
            {
                entity.HasKey(e => e.IntId);

                entity.ToTable("tblModeloTSP");

                entity.Property(e => e.IntId).HasColumnName("intId");

                entity.Property(e => e.StrNombre)
                    .HasMaxLength(50)
                    .HasColumnName("strNombre");
            });

            modelBuilder.Entity<TblSolucion>(entity =>
            {
                entity.HasKey(e => e.IntId);

                entity.ToTable("tblSolucion");

                entity.Property(e => e.IntId).HasColumnName("intId");

                entity.Property(e => e.BlnInicial).HasColumnName("blnInicial");

                entity.Property(e => e.DblCoste).HasColumnName("dblCoste");

                entity.Property(e => e.DblTiempo).HasColumnName("dblTiempo");

                entity.Property(e => e.DtmAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("dtmAlta")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IntIdEjecucion).HasColumnName("intIdEjecucion");

                entity.Property(e => e.StrLinkS3).HasColumnName("strLinkS3");

                entity.HasOne(d => d.IntIdEjecucionNavigation)
                    .WithMany(p => p.TblSolucion)
                    .HasForeignKey(d => d.IntIdEjecucion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSolucion_tblEjecucion");
            });

            modelBuilder.Entity<TblSolucionTsp>(entity =>
            {
                entity.HasKey(e => e.IntId);

                entity.ToTable("tblSolucionTSP");

                entity.Property(e => e.IntId).HasColumnName("intId");

                entity.Property(e => e.DblCoste).HasColumnName("dblCoste");

                entity.Property(e => e.DblTiempo).HasColumnName("dblTiempo");

                entity.Property(e => e.DtmAlta)
                    .HasColumnName("dtmAlta")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IntIdModelo).HasColumnName("intIdModelo");

                entity.Property(e => e.IntIdProblema).HasColumnName("intIdProblema");

                entity.Property(e => e.StrSolucion)
                    .IsRequired()
                    .HasColumnName("strSolucion");

                entity.HasOne(d => d.IntIdModeloNavigation)
                    .WithMany(p => p.TblSolucionTsp)
                    .HasForeignKey(d => d.IntIdModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSolucionTSP_tblModeloTSP");

                entity.HasOne(d => d.IntIdProblemaNavigation)
                    .WithMany(p => p.TblSolucionTsp)
                    .HasForeignKey(d => d.IntIdProblema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSolucionTSP_tblMaestraProblemaTSP");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}